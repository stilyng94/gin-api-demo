// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/gin-api-demo/ent/album"
	"github.com/gin-api-demo/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	albumMixin := schema.Album{}.Mixin()
	albumMixinFields0 := albumMixin[0].Fields()
	_ = albumMixinFields0
	albumFields := schema.Album{}.Fields()
	_ = albumFields
	// albumDescCreateTime is the schema descriptor for create_time field.
	albumDescCreateTime := albumMixinFields0[0].Descriptor()
	// album.DefaultCreateTime holds the default value on creation for the create_time field.
	album.DefaultCreateTime = albumDescCreateTime.Default.(func() time.Time)
	// albumDescUpdateTime is the schema descriptor for update_time field.
	albumDescUpdateTime := albumMixinFields0[1].Descriptor()
	// album.DefaultUpdateTime holds the default value on creation for the update_time field.
	album.DefaultUpdateTime = albumDescUpdateTime.Default.(func() time.Time)
	// album.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	album.UpdateDefaultUpdateTime = albumDescUpdateTime.UpdateDefault.(func() time.Time)
	// albumDescPrice is the schema descriptor for price field.
	albumDescPrice := albumFields[2].Descriptor()
	// album.PriceValidator is a validator for the "price" field. It is called by the builders before save.
	album.PriceValidator = func() func(int) error {
		validators := albumDescPrice.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(price int) error {
			for _, fn := range fns {
				if err := fn(price); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
